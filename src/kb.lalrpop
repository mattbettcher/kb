use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement};

grammar;

pub Func: Statement = {
    "fn" <name:Ident> "(" ")" <code:Block> => Statement::Function(name, code),
};

Statement: Statement = {
    Expr => Statement::Expr(*<>),
};

pub Expr: Box<Expr> = { // (1)
    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    Factor,
};

ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

Block: Vec<Statement> = {
 "{" <Semicolon<Statement>> "}" => <>,
};

Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = { // (1)
    <mut v:(<T> ";")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
